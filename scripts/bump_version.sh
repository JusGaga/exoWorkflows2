#!/bin/bash

set -e  # Arr√™te le script en cas d'erreur

# V√©rification du token GitHub
if [ -z "$GITHUB_TOKEN" ]; then
  echo "‚ùå Erreur : GITHUB_TOKEN non d√©fini."
  exit 1
fi

# V√©rifier si .version existe, sinon l'initialiser
if [ ! -f .version ]; then
  echo "0.0.0" > .version
fi

# Lire la derni√®re version
VERSION=$(cat .version)
IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

# V√©rifier si CHANGELOG.md existe, sinon le cr√©er
if [ ! -f CHANGELOG.md ]; then
  echo "# Changelog" > CHANGELOG.md
  echo "" >> CHANGELOG.md
fi

# D√©terminer le type de release (bas√© sur Conventional Commits)
LAST_COMMIT_MSG=$(git log --format=%B -n 1)

if echo "$LAST_COMMIT_MSG" | grep -q "BREAKING CHANGE"; then
  ((MAJOR++))
  MINOR=0
  PATCH=0
  RELEASE_TYPE="major"
elif echo "$LAST_COMMIT_MSG" | grep -Eiq "^feat"; then
  ((MINOR++))
  PATCH=0
  RELEASE_TYPE="minor"
elif echo "$LAST_COMMIT_MSG" | grep -Eiq "^fix"; then
  ((PATCH++))
  RELEASE_TYPE="patch"
else
  echo "‚ÑπÔ∏è Aucun commit significatif d√©tect√©. Pas de mise √† jour de version."
  exit 0
fi

# Nouvelle version
NEW_VERSION="$MAJOR.$MINOR.$PATCH"
echo "$NEW_VERSION" > .version
echo "‚úÖ Nouvelle version d√©tect√©e : $NEW_VERSION ($RELEASE_TYPE)"

# Ajouter la nouvelle version au changelog
echo "## Version $NEW_VERSION - $(date +'%Y-%m-%d')" >> CHANGELOG.md
git log --pretty=format:"- %s (%an)" --no-merges -n 10 >> CHANGELOG.md
echo "" >> CHANGELOG.md

# ‚úÖ Forcer un changement pour √©viter "nothing to commit"
echo "" >> CHANGELOG.md

# === DEBUG ===
echo "=== DEBUG : Affichage des fichiers modifi√©s ==="
git status
git diff .version CHANGELOG.md
echo "==============================================="

# V√©rifier s'il y a des changements avant de committer
if git diff --quiet && git diff --staged --quiet; then
  echo "‚ÑπÔ∏è Aucun changement d√©tect√©, pas de commit n√©cessaire."
  exit 0
else
  git add .version CHANGELOG.md
  git commit -m "chore(release): bump version to $NEW_VERSION"
fi

# V√©rifier si le tag existe d√©j√† et le supprimer si n√©cessaire
if git rev-parse "v$NEW_VERSION" >/dev/null 2>&1; then
  echo "‚ö†Ô∏è Tag v$NEW_VERSION existe d√©j√†, suppression en cours..."
  git tag -d "v$NEW_VERSION"  # Supprime le tag en local
  git push --delete origin "v$NEW_VERSION" || true  # Supprime le tag sur GitHub
fi

# Cr√©ation du nouveau tag et push
git tag -a "v$NEW_VERSION" -m "Version $NEW_VERSION"
git push origin "v$NEW_VERSION"

echo "üöÄ Tag v$NEW_VERSION cr√©√© et pouss√© avec succ√®s !"
